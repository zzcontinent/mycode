!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC = ${CROSS}gcc$/;"	m
CROSS	Makefile	/^CROSS = aarch64-himix100-linux-$/;"	m
GPIO_CTL_REG_3_	gpio_config.h	6;"	d
GPIO_CTL_REG_KEY	gpio_config.h	7;"	d
GPIO_REG	gpio_config.h	11;"	d
GPIO_REG_DATA_OFFSET	gpio_config.h	15;"	d
GPIO_REG_DIR_OFFSET	gpio_config.h	17;"	d
GPIO_REG_HUB	gpio_config.h	12;"	d
Makefile	Makefile	1;"	F
PAGE_SIZE	memmap.h	5;"	d
PAGE_SIZE_MASK	memmap.h	6;"	d
REG_LEN	memmap.h	4;"	d
_API_H_	api.h	2;"	d
_GPIO_CONFIG_H	gpio_config.h	2;"	d
_MEMMAP_H_	memmap.h	2;"	d
api.c	api.c	1;"	F
api.h	api.h	1;"	F
c_src	Makefile	/^c_src := $(shell ls *.c)$/;"	m
dev	memmap.c	/^static const char dev[]="\/dev\/mem";$/;"	v	file:
fd	memmap.c	/^static int fd = -1;$/;"	v	file:
fd	memmap.h	/^	int fd;$/;"	m	struct:map_info	access:public
get_recovery_btn	api.c	/^int get_recovery_btn()$/;"	f
get_recovery_btn	api.h	/^extern int get_recovery_btn();$/;"	p	signature:()
global_map_info	memmap.c	/^struct map_info global_map_info;$/;"	v	typeref:struct:map_info
global_map_info	memmap.h	/^extern struct map_info global_map_info;$/;"	x
gpio_config.c	gpio_config.c	1;"	F
gpio_config.h	gpio_config.h	1;"	F
init_gpio	api.h	/^extern int init_gpio();$/;"	p	signature:()
init_gpio	gpio_config.c	/^int init_gpio()$/;"	f
init_gpio	gpio_config.h	/^extern int init_gpio();$/;"	p	signature:()
main	test.c	/^void main()$/;"	f
map_addr	memmap.h	/^	uint32_t* map_addr; $/;"	m	struct:map_info	access:public
map_info	memmap.h	/^struct map_info {$/;"	s
map_info::fd	memmap.h	/^	int fd;$/;"	m	struct:map_info	access:public
map_info::map_addr	memmap.h	/^	uint32_t* map_addr; $/;"	m	struct:map_info	access:public
map_info::map_len	memmap.h	/^	int map_len; $/;"	m	struct:map_info	access:public
map_info::phy_addr	memmap.h	/^	uint32_t* phy_addr; $/;"	m	struct:map_info	access:public
map_info::phy_addr_to_page_addr	memmap.h	/^	uint32_t* phy_addr_to_page_addr; $/;"	m	struct:map_info	access:public
map_info::phy_addr_to_page_addr_offset	memmap.h	/^	int phy_addr_to_page_addr_offset; $/;"	m	struct:map_info	access:public
map_info::phy_len	memmap.h	/^	int phy_len; $/;"	m	struct:map_info	access:public
map_info::phy_len_in_page	memmap.h	/^	int phy_len_in_page; $/;"	m	struct:map_info	access:public
map_len	memmap.h	/^	int map_len; $/;"	m	struct:map_info	access:public
memmap	memmap.c	/^int memmap(uint32_t phy_addr, int size)$/;"	f	signature:(uint32_t phy_addr, int size)
memmap	memmap.h	/^extern int memmap(uint32_t phy_addr, int size);$/;"	p	signature:(uint32_t phy_addr, int size)
memmap.c	memmap.c	1;"	F
memmap.h	memmap.h	1;"	F
memunmap	memmap.c	/^int memunmap()$/;"	f
memunmap	memmap.h	/^extern int memunmap();$/;"	p	signature:()
objs	Makefile	/^objs := $(patsubst %.c,%.o,$(c_src))$/;"	m
phy_addr	memmap.h	/^	uint32_t* phy_addr; $/;"	m	struct:map_info	access:public
phy_addr_to_page_addr	memmap.h	/^	uint32_t* phy_addr_to_page_addr; $/;"	m	struct:map_info	access:public
phy_addr_to_page_addr_offset	memmap.h	/^	int phy_addr_to_page_addr_offset; $/;"	m	struct:map_info	access:public
phy_len	memmap.h	/^	int phy_len; $/;"	m	struct:map_info	access:public
phy_len_in_page	memmap.h	/^	int phy_len_in_page; $/;"	m	struct:map_info	access:public
set_led_by_bits	api.c	/^void set_led_by_bits(unsigned int bit_num, int on_off)$/;"	f	signature:(unsigned int bit_num, int on_off)
set_led_by_bits	api.h	/^extern void set_led_by_bits(unsigned int bit_num, int on_off);$/;"	p	signature:(unsigned int bit_num, int on_off)
set_led_by_id	api.c	/^void set_led_by_id(unsigned int led_id, int on_off)$/;"	f	signature:(unsigned int led_id, int on_off)
set_led_by_id	api.h	/^extern void set_led_by_id(unsigned int led_id, int on_off);$/;"	p	signature:(unsigned int led_id, int on_off)
test.c	test.c	1;"	F
